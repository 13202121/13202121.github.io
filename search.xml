<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 CentOS 上架設 rendertron 服務來處理 SSR（Server Side Rendering）</title>
      <link href="/2023/12/15/%E5%9C%A8%20CentOS%20%E4%B8%8A%E6%9E%B6%E8%A8%AD%20rendertron%20%E6%9C%8D%E5%8B%99%E4%BE%86%E8%99%95%E7%90%86%20SSR%EF%BC%88Server%20Side%20Rendering%EF%BC%89/"/>
      <url>/2023/12/15/%E5%9C%A8%20CentOS%20%E4%B8%8A%E6%9E%B6%E8%A8%AD%20rendertron%20%E6%9C%8D%E5%8B%99%E4%BE%86%E8%99%95%E7%90%86%20SSR%EF%BC%88Server%20Side%20Rendering%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>公司的網站是採用 SPA（Single Page Application）的呈現方式，但是這種方式不利於 SEO、不利於 Preview，像是在 Facebook、Line、Twitter 分享連結的時候，沒有內容的預覽，在行銷推廣上就略遜一籌，今天就要來介紹一個 SSR（Server Side Rendering）的服務 - <a href="https://github.com/GoogleChrome/rendertron" target="_blank" rel="noopener">rendertron</a>。</p><p>rendertron 是 Google Chrome 的子專案，背後使用 <a href="https://zh.wikipedia.org/wiki/Chromium" target="_blank" rel="noopener">Chromium</a> 來渲染轉發過來的網址，再將渲染後的結果回傳，網站的程式都不用改，只需要加一個 Middleware 來判斷是否要轉發給 rendertron 去處理即可，rendertron 的開發團隊有架設一個對外的服務 <a href="https://render-tron.appspot.com/" target="_blank" rel="noopener">https://render-tron.appspot.com/</a>，大家可以上去玩玩看。</p><p>再來，我們試著把 rendertron 服務架設在 CentOS 7 上，這過程踩了不少雷，吃了不少苦頭，希望這篇文章能讓大家少走一點冤枉路。</p><h2 id="切換到-root-身份"><a href="#切換到-root-身份" class="headerlink" title="切換到 root 身份"></a>切換到 root 身份</h2><p>整個過程我建議切換到 root 身份來做，會比較順利一點。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><h2 id="Clone-rendertron"><a href="#Clone-rendertron" class="headerlink" title="Clone rendertron"></a>Clone rendertron</h2><p>因為我要去改 rendertron 的預設參數，所以我必須自行建置 rendertron，如果不需要改參數，rendertron 是可以用 npm 安裝成全域的套件，挺方便的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安裝 git </span></span><br><span class="line">yum install -y git </span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone rendertron </span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GoogleChrome/rendertron </span><br><span class="line"><span class="built_in">cd</span> rendertron</span><br></pre></td></tr></table></figure><blockquote><p>記得要確認我們所在的目錄是在 rendertron 底下，不然一些依賴套件會裝錯位置。</p></blockquote><h2 id="安裝-Node-js-官方的-Repository"><a href="#安裝-Node-js-官方的-Repository" class="headerlink" title="安裝 Node.js 官方的 Repository"></a>安裝 Node.js 官方的 Repository</h2><p><a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">EPEL</a> 上面的 <code>Node.js</code> 版本太舊了，我們安裝官方提供的 Repository，安裝的版本是 <code>14.x</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 root 身份底下</span></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_14.x | bash - </span><br><span class="line"></span><br><span class="line"><span class="comment"># 非 root 身份 </span></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -</span><br></pre></td></tr></table></figure><h2 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h2><p>接著，我們就將 <code>Node.js</code> 裝起來，版本是 <code>14.5.0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure><h2 id="建立-config-json-修改預設參數"><a href="#建立-config-json-修改預設參數" class="headerlink" title="建立 config.json 修改預設參數"></a>建立 config.json 修改預設參數</h2><p>我想要改的參數是 <code>timeout</code> 跟 <code>port</code>，在 rendertron 的根目錄底下建立 <code>config.json</code> 檔案，把想要改的參數放進去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="string">"timeout"</span>: 20000, </span><br><span class="line"><span class="string">"port"</span>: 3001 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安裝-grpc"><a href="#安裝-grpc" class="headerlink" title="安裝 grpc"></a>安裝 grpc</h2><p>rendertron 的依賴樹中有依賴到 grpc，但是在安裝依賴套件的過程中，找不到 grpc 預先編譯的版本，然後它就會走向自行編譯的流程，接著就出錯了。</p><p><img src="/images/i89qd5w.png" alt></p><p>我們是可以把 gcc 編譯工具裝起來，依舊能順利編譯，只不過這有點耗時，其實只要先獨立安裝 grpc 就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grpc --unsafe-perm=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>再來，我們就可以建置 rendertron，執行下面指令進行建置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安裝依賴套件 </span></span><br><span class="line">npm install --unsafe-perm=<span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 建置 rendertron </span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="安裝缺少的-Library-或-Google-Chrome-瀏覽器"><a href="#安裝缺少的-Library-或-Google-Chrome-瀏覽器" class="headerlink" title="安裝缺少的 Library 或 Google Chrome 瀏覽器"></a>安裝缺少的 Library 或 Google Chrome 瀏覽器</h2><p>如果這時候我們去執行 rendertron，會跑出一個錯誤畫面。</p><p><img src="/images/AKuNupW.png" alt></p><p>意思是說，在跑 Chromium 的時候少了一些檔案，如果想要知道究竟缺了哪些檔案，可以到切換目錄到 <code>/usr/lib/rendertron/node_modules/puppeteer/.local-chromium/linux-xxxxxx/chrome-linux</code> 底下，執行指令 <code>ldd chrome | grep not</code> 就會列出缺少的檔案。</p><p><img src="/images/9OcqUej.png" alt></p><p>然後呢，我們就要再透過 <code>yum provides xxx</code> 指令去找出這些檔案在哪些 Library 裡面。</p><p><img src="/images/PikOOzY.png" alt></p><p>各位朋友，不需要一個一個去找了，我已經幫各位找好了，執行下面指令就可以將這些缺少的 Library 裝起來。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libXcomposite libXcursor libXdamage libXext libXfixes libXi libXrender libXtst cups-libs libXScrnSaver libXrandr atk at-spi2-atk pango cairo at-spi2-core gtk3 gdk-pixbuf2</span><br></pre></td></tr></table></figure><p>或者，如果想省麻煩，也可以直接安裝 Google Chrome，在 <code>/etc/yum.repos.d</code> 資料夾底下新增 <code>google-chrome.repo</code> 檔案，將以下內容寫到這個檔案中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[google-chrome] </span><br><span class="line">name=google-chrome </span><br><span class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64 </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=1 </span><br><span class="line">gpgkey=https://dl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure><p>接著，執行下面指令，就可以將最新穩定版本的 Google Chrome 瀏覽器裝起來。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y google-chrome-stable</span><br></pre></td></tr></table></figure><h2 id="執行-rendertron"><a href="#執行-rendertron" class="headerlink" title="執行 rendertron"></a>執行 rendertron</h2><p>把該裝的裝一裝之後，我們就可以執行下面指令把 rendertron 跑起來，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>我們看到 <code>Listening on port xxxx</code> 的訊息，就表示執行成功了。</p><p><img src="/images/hL7taGi.png" alt></p><p>來測試一下，rendertron 服務有一個 <code>render</code> API，只要把要渲染的網址接到它的後面，就可以了。</p><p><img src="/images/OujN89Z.png" alt></p><p>而且，它還可以截圖，截圖的 API 是 <code>screenshot</code>，預設的圖片大小是 1000×1000，這個可以透過參數 <code>width</code>、<code>height</code> 去改。</p><p><img src="/images/p96VYOY.png" alt></p><h2 id="用-pm2-來管理-rendertron"><a href="#用-pm2-來管理-rendertron" class="headerlink" title="用 pm2 來管理 rendertron"></a>用 pm2 來管理 rendertron</h2><p><code>pm2</code> 是一個 Node.js 服務的管理器，我們可以透過它來管理 rendertron 的<code>開機啟動</code>、<code>背景執行</code>、<code>壞掉重啟</code>，相當方便，我們來安裝 pm2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -g 表示安裝成全域的套件 </span></span><br><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>接著，執行下面的指令就可以叫 pm2 來幫我們管理 rendertron。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 透過 pm2 啟動 rendertron，名稱為 rendertron，且在每日 06:00:00 強制重啟。 </span></span><br><span class="line">pm2 start build/rendertron.js --name rendertron --cron <span class="string">"0 0 6 * *"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存目前 pm2 管理的程序清單 </span></span><br><span class="line">pm2 save </span><br><span class="line"></span><br><span class="line"><span class="comment"># 依照剛剛保存的程序清單建立服務，並設為開機啟動。 </span></span><br><span class="line">pm2 startup systemd</span><br></pre></td></tr></table></figure><p>以上就是 rendertron 3.0.0 安裝在 CentOS 7 上的步驟，提供給各位朋友參考。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.jianshu.com/p/38e6d3bf596d" target="_blank" rel="noopener">安裝部署 rendertron 教程</a></li><li><a href="https://tn710617.github.io/zh-tw/pm2/" target="_blank" rel="noopener">pm2 - 用法大全</a></li><li><a href="https://zhuanlan.zhihu.com/p/33691734" target="_blank" rel="noopener">centos7 systemd pm2 開機啟動</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存穿透、缓存击穿、缓存雪崩</title>
      <link href="/2023/07/20/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
      <url>/2023/07/20/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="一、缓存穿透"><a href="#一、缓存穿透" class="headerlink" title="一、缓存穿透"></a>一、缓存穿透</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p><b style="color:#f66;">Key 对应的数据在 Redis 中并不存在</b>，每次针对此 Key 的请求从缓存获取不到，请求将会从数据库中查询，访问量大了可能压垮数据库。比如用一个不存在的用户 ID 获取用户信息，Redis 缓存和数据库中都没有，若黑客利用此漏洞进行攻击可能压垮数据库（<strong>黑客访问肯定不存在的数据，造成服务器压力大</strong>）。</p><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h3><p>一个一定不存在的数据，由于缓存是不命中时查询后被动写入，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><ul><li><strong>对空值缓存：</strong> 如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然将这个空结果（null）进行缓存，这样可以缓解数据库的访问压力，然后设置空结果的过期时间一般短一些，最长不超过五分钟。（只能作为简单的应急方案）</li><li><strong>设置可访问的名单（白名单）：</strong> 使用 Bitmaps 类型定义一个可以访问的名单，名单 ID 作为 Bitmaps 的偏移量，每次访问进行与 Bitmaps 里面的 ID 进行比较，如果访问 ID 不在 Bitmaps 里面，进行拦截不允许访问。</li><li><strong>布隆过滤器：</strong> 将所有可能存在的数据哈希到一个足够大的 Bitmaps 中，一个一定不存在的数据会被这个过滤器拦截掉，从而避免了对底层存储系统的查询压力。</li><li><strong>进行实时监控：</strong> 当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据和运维人员配合可以设置黑名单限制服务。</li></ul><h2 id="二、缓存击穿"><a href="#二、缓存击穿" class="headerlink" title="二、缓存击穿"></a>二、缓存击穿</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h3><p><b style="color:#f66">Key 对应的数据存在,但在 Redis 中过期</b>，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从数据库中查询并回写至缓存，这个时候大量并发的请求可能会瞬间数据库压垮。（<strong>Redis某个 Key 过期，大量的合理数据请求到达数据库</strong>）</p><h3 id="2-解决方案-1"><a href="#2-解决方案-1" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h3><ul><li><strong>预先设置热门数据：</strong> 在 Redis 高峰访问之前，把一些热门数据提前加载到 Redis 里面，加大这些热门数据 Key 的时长。</li><li><strong>实时调整：</strong> 现场监控哪些数据是热门数据，实时调整其对应 Key 的过期时长。</li><li><strong>使用互斥锁加递归：</strong><br>（1）即在缓存失效的时候（判断拿出来的值为空），不是立即从数据库查询；<br>（2）先使用互斥锁进行加锁；<br>（3）当加锁成功后，再进行从数据库查询，并回写至缓存中,最后释放锁。<br>（4）当加锁失败，证明有线程在从数据库查询，当前线程睡眠一段时间再重试从缓存中获取数据，若不存在，再递归执行加锁后查询数据。</li></ul><p>代码示例：</p><ul><li><p>获得锁的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">"1"</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>释放锁的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求数据方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">Shop shop = queryWithMutex(id);</span><br><span class="line"><span class="keyword">if</span> (shop == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.fail(<span class="string">"店铺不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line"><span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Shop <span class="title">queryWithMutex</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">String key = CACHE_SHOP_KEY + id;</span><br><span class="line"><span class="comment">//1.从redis查询商铺缓存</span></span><br><span class="line">String shopJson = stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"><span class="comment">//2.判断是否存在</span></span><br><span class="line"><span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line"><span class="comment">//3.存在，直接返回</span></span><br><span class="line">Shop shop = JSONUtil.toBean(shopJson, Shop<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shopJson != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.实现缓存重建</span></span><br><span class="line"><span class="comment">//4.1获取互斥锁</span></span><br><span class="line">String lockKey = <span class="string">"lock:shop:"</span> + id;</span><br><span class="line">Shop shop = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> isLock = tryLock(lockKey);</span><br><span class="line"><span class="comment">//4.2判断是否获取成功</span></span><br><span class="line"><span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line"><span class="comment">//4.3失败，则休眠并重试</span></span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.4成功，根据id查询数据库</span></span><br><span class="line">shop = getById(id);</span><br><span class="line"><span class="comment">//5.不存在，返回错误</span></span><br><span class="line"><span class="keyword">if</span> (shop == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//缓存击穿问题</span></span><br><span class="line"><span class="comment">//将空值写入redis</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(key, <span class="string">""</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.存在，写入redis</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//7.释放互斥锁</span></span><br><span class="line">unlock(lockKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8.返回</span></span><br><span class="line"><span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、缓存雪崩"><a href="#三、缓存雪崩" class="headerlink" title="三、缓存雪崩"></a>三、缓存雪崩</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h3><p><b style="color:#f66;">Key 对应的数据存在，但在 Redis 中过期</b>，<em>缓存雪崩针</em> 对是极小时间段内，大量 Key 失效缓存导致，引发数据库压力激增；<em>缓存击穿</em> 则是极小时间段内，某一个热门 Key 缓存导致,引发数据库压力激增。</p><h3 id="2-解决方案-2"><a href="#2-解决方案-2" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h3><ul><li><p><strong>构建多级缓存架构：</strong> nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</p></li><li><p><strong>使用锁或队列：</strong> 用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。（<strong>效率低，不适用高并发情况</strong>）</p></li><li><p><strong>设置过期标志更新缓存：</strong> 记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 Key 的缓存。</p></li><li><p><strong>将缓存失效时间分散开：</strong> 可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用OpenSSL创建自签Https证书</title>
      <link href="/2023/05/15/%E5%88%A9%E7%94%A8OpenSSL%E5%88%9B%E5%BB%BA%E8%87%AA%E7%AD%BEHttps%E8%AF%81%E4%B9%A6/"/>
      <url>/2023/05/15/%E5%88%A9%E7%94%A8OpenSSL%E5%88%9B%E5%BB%BA%E8%87%AA%E7%AD%BEHttps%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>OpenSSL一般默认都有安装，所以直接使用即可，如果服务器没有该命令同样自行百度安装。</p><p>生成HTTPS证书需要以下步骤：</p><ul><li>生成私钥（key）</li></ul><p>在合适的文件夹下输入该命令，使用 openssl 命令生成私钥它将生成名为 private.key 的RSA密钥文件，至少使用2048位的密钥长度，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private.key 2048</span><br></pre></td></tr></table></figure><p>这将生成一个2048位的RSA私钥，并将其保存到 private.key 文件中。</p><ul><li>生成证书签名请求（CSR）</li></ul><p>使用 openssl 命令生成证书签名请求，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key private.key -out server.csr</span><br><span class="line"></span><br><span class="line">CountryName: CN</span><br><span class="line">ProvinceName: Guangdong</span><br><span class="line">Locality Name: Guangzhou</span><br><span class="line">Organization Name: ABC</span><br><span class="line">Organizational Unti Name: ABC</span><br><span class="line">Common Name: 填自己的域名或者服务器ip地址</span><br><span class="line">Email Adress: 123@163.com</span><br><span class="line">A Challenge password: 因为是可选的所以直接回车即可</span><br><span class="line">An optional company name: 同样是可选的所以直接回车即可</span><br></pre></td></tr></table></figure><p>这将使用 private.key 文件中的私钥生成一个证书签名请求，并将其保存到 server.csr 文件中。在此过程中，您需要提供一些证书信息，如国家、省份、城市、组织名称、通用名称等。</p><ul><li>自签名证书</li></ul><p>使用 openssl 命令自签名证书，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -signkey private.key -out server.crt</span><br></pre></td></tr></table></figure><p>这将使用 server.csr 文件中的 CSR 和 private.key 文件中的私钥生成一个自签名证书，并将其保存到 server.crt 文件中。<br>在此过程中，您需要指定证书的有效期（以天为单位），这里我指定有效时间为 <em>3650</em> 天，也就是 <em>10</em> 年。</p><blockquote><p>请注意，自签名证书只适用于测试和开发环境，不应在生产环境中使用。在生产环境中，您应该从受信任的证书颁发机构（CA）购买证书。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx部署Vue项目使用下上文</title>
      <link href="/2023/05/12/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E4%B8%8B%E4%B8%8A%E6%96%87/"/>
      <url>/2023/05/12/Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E4%B8%8B%E4%B8%8A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>通常我们希望一个域名，可以部署多个网站，此时，我们将需要利用上下文进行网站的区分。</p><p>首先，我们需要在Vue项目的 <em>vue.config.js</em> 进行配置上下文。</p><p><strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在启动命令或打包命中，用 --basedir=/xxx/ 进行动态指定上下文，其中xxx代表为上下文名称</span><br><span class="line"><span class="keyword">const</span> basedir = process.env.npm_config_basedir || <span class="string">"/"</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    publicPath: basedir,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其次，我们需要在Vue项目的 <em>router.js</em> 进行配置上下文。</p><p><strong>router.js (vue-router 3.x)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 先通过以下语句获取上下文</span><br><span class="line"><span class="keyword">const</span> basedir =  process.env.BASE_URL;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base: basedir,</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后，就是 <em>Nginx</em> 的配置了，我们在nginx配置文件中，进行由下配置即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    ...;</span><br><span class="line">    ...;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># xxx 代表上下文名称</span></span><br><span class="line">    location  ^~/xxx &#123;</span><br><span class="line">    <span class="comment"># 打包后项目存放路径</span></span><br><span class="line">        <span class="built_in">alias</span> /opt/a/b/c/dist/;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /xxx/index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，就是部署相关需要适配修改的配置内容。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端利用Blob对象创建指定文件并下载</title>
      <link href="/2022/06/05/%E5%89%8D%E7%AB%AF%E5%88%A9%E7%94%A8Blob%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/06/05/%E5%89%8D%E7%AB%AF%E5%88%A9%E7%94%A8Blob%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>在我们的开发过程中，文件下载是一个常见的功能。而目前的开发方式常采用前后端分离模式，所以文件下载时，前端可以发送ajax请求获取文件流，然后利用Blob对象生成文件后，再下载至本地。这种方式比转灵活，非常适合处理一些实时生成文件下载，当生成过程出现异常时，可以根据获取的类型，进行分类处理。</p><a id="more"></a><h2 id="一、Blob对象"><a href="#一、Blob对象" class="headerlink" title="一、Blob对象"></a>一、Blob对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">Blob对象</a> 表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File接口基于Blob，继承了blob的功能并将其扩展使其支持用户系统上的文件。</p><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob( array, options );</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>array 是一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的 Array ，或者其他类似对象的混合体，它将会被放进 Blob。DOMStrings 会被编码为 UTF-8。</li><li>options 是一个可选的BlobPropertyBag字典，它可能会指定如下两个属性：<br>type，默认值为 “”，它代表了将会被放入到 blob 中的数组内容的 MIME 类型。<br>endings，默认值为”transparent”，用于指定包含行结束符\n的字符串如何被写入。 它是以下两个值中的一个： “native”，代表行结束符会被更改为适合宿主操作系统文件系统的换行符，或者 “transparent”，代表会保持 blob 中保存的结束符不变 Non-Standard</li></ul><h2 id="二、URL对象"><a href="#二、URL对象" class="headerlink" title="二、URL对象"></a>二、URL对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL" target="_blank" rel="noopener">URL</a> 接口用于解析，构造，规范化和编码 URLs。 它通过提供允许您轻松阅读和修改 URL 组件的属性来工作。 通常，通过在调用 URL 的构造函数时将 URL 指定为字符串或提供相对 URL 和基本 URL 来创建新的 URL 对象。 然后，您可以轻松读取 URL 的已解析组成部分或对 URL 进行更改。</p><p>静态方法：</p><ul><li>URL.createObjectURL();</li></ul><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。</p><ul><li>URL.revokeObjectURL()</li></ul><p>URL.revokeObjectURL() 静态方法用来释放一个之前已经存在的、通过调用 URL.createObjectURL() 创建的 URL 对象。当你结束使用某个 URL 对象之后，应该通过调用这个方法来让浏览器知道不用在内存中继续保留对这个文件的引用了。</p><p><em>特别说明：</em></p><p>在每次调用 createObjectURL() 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 URL.revokeObjectURL() 方法来释放。<br>浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p><h2 id="三、利用a标签下载"><a href="#三、利用a标签下载" class="headerlink" title="三、利用a标签下载"></a>三、利用a标签下载</h2><ul><li><p>生成a标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure></li><li><p>href属性指定下载链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link.href = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br></pre></td></tr></table></figure></li><li><p>download属性指定文件名<br>只有 Firefox 和 Chrome 支持 download 属性。<em>若在html文档中使用时，当URL存在跨域时，会导致download属性指定的文件名无效</em>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link.download = fileName;</span><br></pre></td></tr></table></figure></li><li><p>click()事件触发下载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link.click();</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、兼容IE"><a href="#四、兼容IE" class="headerlink" title="四、兼容IE"></a>四、兼容IE</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.msSaveOrOpenBlob(blob, fileName);</span><br></pre></td></tr></table></figure><h2 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h2><p>基于axios请求库，及采用Promise写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileName = <span class="string">"abc.xlsx"</span>;</span><br><span class="line"><span class="keyword">let</span> downloadUrl = <span class="string">"http://xxx.xxx.com"</span>;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">`downloadUrl`</span>, &#123;</span><br><span class="line">    responseType: <span class="string">'blob'</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 接口异常时返回 Json 数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.type == <span class="string">"application/json"</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">            <span class="comment">// message 为消息字段名</span></span><br><span class="line">            <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(e.target.result);</span><br><span class="line">            reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> alert(data.message);</span><br><span class="line">            reader.readAsText(res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([res.data], &#123;</span><br><span class="line">                type: res.type</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.navigator &amp;&amp; <span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">                <span class="comment">// for IE</span></span><br><span class="line">                <span class="built_in">window</span>.navigator.msSaveOrOpenBlob(blob, fileName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// for Non-IE</span></span><br><span class="line">                <span class="keyword">let</span> objectUrl = URL.createObjectURL(blob);</span><br><span class="line">                <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">                link.href = objectUrl;</span><br><span class="line">                link.setAttribute(<span class="string">"download"</span>, fileName);</span><br><span class="line">                <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">                link.click();</span><br><span class="line">                <span class="built_in">window</span>.URL.revokeObjectURL(link.href);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// error handler</span></span><br><span class="line">        alert(<span class="string">"请求下载数据异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10右键添加『在此处打开命令窗口』</title>
      <link href="/2022/06/05/Windows10%E5%8F%B3%E9%94%AE%E6%B7%BB%E5%8A%A0%E3%80%8E%E5%9C%A8%E6%AD%A4%E5%A4%84%E6%89%93%E5%BC%80%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3%E3%80%8F/"/>
      <url>/2022/06/05/Windows10%E5%8F%B3%E9%94%AE%E6%B7%BB%E5%8A%A0%E3%80%8E%E5%9C%A8%E6%AD%A4%E5%A4%84%E6%89%93%E5%BC%80%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3%E3%80%8F/</url>
      
        <content type="html"><![CDATA[<p>在Windows 10 中，命令提示符已被 Powershell 取代，然而很多用户并不适应，如果大家还是想继续使用命令提示符，那么可以在右键菜单中添加”在此处打开命令窗口”设置项，那么该如何操作呢？</p><a id="more"></a><ol><li><p>新建一个txt文件，命名为 OpenCmdHere.txt，设置编码格式为ANSI</p></li><li><p>在文件中输入如下代码，并保存</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\OpenCmdHere]</span><br><span class="line">@=<span class="string">"在此处打开命令窗口"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"cmd.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\OpenCmdHere\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"cmd.exe /s /k pushd \"%V\""</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere]</span><br><span class="line">@=<span class="string">"在此处打开命令窗口"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"cmd.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"cmd.exe /s /k pushd \"%V\""</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\OpenCmdHere]</span><br><span class="line">@=<span class="string">"在此处打开命令窗口"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"cmd.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\OpenCmdHere\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"cmd.exe /s /k pushd \"%V\""</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\LibraryFolder\background\shell\OpenCmdHere]</span><br><span class="line">@=<span class="string">"在此处打开命令窗口"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"cmd.exe"</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\LibraryFolder\background\shell\OpenCmdHere\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">"cmd.exe /s /k pushd \"%V\""</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>重命名为 OpenCmdHere.reg</p></li><li><p>双击 OpenCmdHere.reg 文件运行，确认更改注册表。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编码技巧之高效代码54例--高德</title>
      <link href="/2019/12/30/Java%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B9%8B%E9%AB%98%E6%95%88%E4%BB%A3%E7%A0%8154%E4%BE%8B-%E9%AB%98%E5%BE%B7/"/>
      <url>/2019/12/30/Java%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B9%8B%E9%AB%98%E6%95%88%E4%BB%A3%E7%A0%8154%E4%BE%8B-%E9%AB%98%E5%BE%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下文章来源于高德技术，作者常意。</p></blockquote><p>导读：世界上只有两种物质：高效率和低效率；世界上只有两种人：高效率的人和低效率的人。——萧伯纳</p><p>同理，世界上只有两种代码：高效代码和低效代码；世界上只有两种人：编写高效代码的人和编写低效代码的人。如何编写高效代码，是每个研发团队都面临的一个重大问题。</p><p>本文作者根据实际经验，查阅了大量资料，总结了”Java高效代码54例”，让每一个Java程序员都能编写出”高效代码”。</p><h3 id="常量-amp-变量"><a href="#常量-amp-变量" class="headerlink" title="常量&amp;变量"></a>常量&amp;变量</h3><ol><li><h4 id="直接赋值常量值，禁止声明新对象"><a href="#直接赋值常量值，禁止声明新对象" class="headerlink" title="直接赋值常量值，禁止声明新对象"></a>直接赋值常量值，禁止声明新对象</h4></li></ol><p>直接赋值常量值，只是创建了一个对象引用，而这个对象引用指向常量值。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Long i = <span class="keyword">new</span> Long(<span class="number">1L</span>);</span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Long i = <span class="number">1L</span>;</span><br><span class="line">String s = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><h4 id="当成员变量值无需改变时，尽量定义为静态常量"><a href="#当成员变量值无需改变时，尽量定义为静态常量" class="headerlink" title="当成员变量值无需改变时，尽量定义为静态常量"></a>当成员变量值无需改变时，尽量定义为静态常量</h4></li></ol><p>在类的每个对象实例中，每个成员变量都有一份副本，而成员静态常量只有一份实例。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeout = <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIMEOUT = <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><h4 id="尽量使用基本数据类型，避免自动装箱和拆箱"><a href="#尽量使用基本数据类型，避免自动装箱和拆箱" class="headerlink" title="尽量使用基本数据类型，避免自动装箱和拆箱"></a>尽量使用基本数据类型，避免自动装箱和拆箱</h4></li></ol><p>Java 中的基本数据类型double、float、long、int、short、char、boolean，分别对应包装类Double、Float、Long、Integer、Short、Character、Boolean。JVM支持基本类型与对应包装类的自动转换，被称为自动装箱和拆箱。装箱和拆箱都是需要CPU和内存资源的，所以应尽量避免使用自动装箱和拆箱。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] values = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">    sum += value; <span class="comment">// 相当于result = Integer.valueOf(result.intValue() + value);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] values = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">    sum += value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><h4 id="如果变量的初值会被覆盖，就没有必要给变量赋初值"><a href="#如果变量的初值会被覆盖，就没有必要给变量赋初值" class="headerlink" title="如果变量的初值会被覆盖，就没有必要给变量赋初值"></a>如果变量的初值会被覆盖，就没有必要给变量赋初值</h4></li></ol><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><h4 id="尽量使用函数内的基本类型临时变量"><a href="#尽量使用函数内的基本类型临时变量" class="headerlink" title="尽量使用函数内的基本类型临时变量"></a>尽量使用函数内的基本类型临时变量</h4></li></ol><p>在函数内，基本类型的参数和临时变量都保存在栈（Stack）中，访问速度较快；对象类型的参数和临时变量的引用都保存在栈（Stack）中，内容都保存在堆（Heap）中，访问速度较慢。在类中，任何类型的成员变量都保存在堆（Heap）中，访问速度较慢。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(@NonNull <span class="keyword">double</span>[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> value : values) &#123;</span><br><span class="line">            result += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(@NonNull <span class="keyword">double</span>[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>D;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> value : values) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        result += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><h4 id="尽量不要在循环体外定义变量"><a href="#尽量不要在循环体外定义变量" class="headerlink" title="尽量不要在循环体外定义变量"></a>尽量不要在循环体外定义变量</h4></li></ol><p>在老版JDK中，建议“尽量不要在循环体内定义变量”，但是在新版的JDK中已经做了优化。通过对编译后的字节码分析，变量定义在循环体外和循环体内没有本质的区别，运行效率基本上是一样的。</p><p>反而，根据“局部变量作用域最小化”原则，变量定义在循环体内更科学更便于维护，避免了延长大对象生命周期导致延缓回收问题 。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserVO userVO;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><h4 id="不可变的静态常量，尽量使用非线程安全类"><a href="#不可变的静态常量，尽量使用非线程安全类" class="headerlink" title="不可变的静态常量，尽量使用非线程安全类"></a>不可变的静态常量，尽量使用非线程安全类</h4></li></ol><p>不可变的静态常量，虽然需要支持多线程访问，也可以使用非线程安全类。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    classMap.put(<span class="string">"VARCHAR"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ...</span><br><span class="line">    CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    classMap.put(<span class="string">"VARCHAR"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ...</span><br><span class="line">    CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><h4 id="不可变的成员变量，尽量使用非线程安全类"><a href="#不可变的成员变量，尽量使用非线程安全类" class="headerlink" title="不可变的成员变量，尽量使用非线程安全类"></a>不可变的成员变量，尽量使用非线程安全类</h4></li></ol><p>不可变的成员变量，虽然需要支持多线程访问，也可以使用非线程安全类。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Strategy&gt; strategyList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Strategy&gt; strategyMap;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(strategyList)) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = (<span class="keyword">int</span>) Math.ceil(strategyList.size() * <span class="number">4.0</span> / <span class="number">3</span>);</span><br><span class="line">            Map&lt;String, Strategy&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class="line">            <span class="keyword">for</span> (Strategy strategy : strategyList) &#123;</span><br><span class="line">                map.put(strategy.getType(), strategy);</span><br><span class="line">            &#125;</span><br><span class="line">            strategyMap = Collections.unmodifiableMap(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Strategy&gt; strategyList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Strategy&gt; strategyMap;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(strategyList)) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = (<span class="keyword">int</span>) Math.ceil(strategyList.size() * <span class="number">4.0</span> / <span class="number">3</span>);</span><br><span class="line">            Map&lt;String, Strategy&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(size);</span><br><span class="line">            <span class="keyword">for</span> (Strategy strategy : strategyList) &#123;</span><br><span class="line">                map.put(strategy.getType(), strategy);</span><br><span class="line">            &#125;</span><br><span class="line">            strategyMap = Collections.unmodifiableMap(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象-amp-类"><a href="#对象-amp-类" class="headerlink" title="对象&amp;类"></a>对象&amp;类</h3><ol start="9"><li><h4 id="禁止使用JSON转化对象"><a href="#禁止使用JSON转化对象" class="headerlink" title="禁止使用JSON转化对象"></a>禁止使用JSON转化对象</h4></li></ol><p>JSON提供把对象转化为JSON字符串、把JSON字符串转为对象的功能，于是被某些人用来转化对象。这种对象转化方式，虽然在功能上没有问题，但是在性能上却存在问题。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = JSON.parseArray(JSON.toJSONString(userDOList), UserVO<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li><h4 id="尽量不使用反射赋值对象"><a href="#尽量不使用反射赋值对象" class="headerlink" title="尽量不使用反射赋值对象"></a>尽量不使用反射赋值对象</h4></li></ol><p>用反射赋值对象，主要优点是节省了代码量，主要缺点却是性能有所下降。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    BeanUtils.copyProperties(userDO, userVO);</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li><h4 id="采用Lambda表达式替换内部匿名类"><a href="#采用Lambda表达式替换内部匿名类" class="headerlink" title="采用Lambda表达式替换内部匿名类"></a>采用Lambda表达式替换内部匿名类</h4></li></ol><p>对于大多数刚接触JDK8的同学来说，都会认为Lambda表达式就是匿名内部类的语法糖。实际上， Lambda表达式在大多数虚拟机中采用invokeDynamic指令实现，相对于匿名内部类在效率上会更高一些。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = ...;</span><br><span class="line">Collections.sort(userList, <span class="keyword">new</span> Comparator&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User user1, User user2)</span> </span>&#123;</span><br><span class="line">        Long userId1 = user1.getId();</span><br><span class="line">        Long userId2 = user2.getId();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> userId1.compareTo(userId2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = ...;</span><br><span class="line">Collections.sort(userList, (user1, user2) -&gt; &#123;</span><br><span class="line">    Long userId1 = user1.getId();</span><br><span class="line">    Long userId2 = user2.getId();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> userId1.compareTo(userId2);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="12"><li><h4 id="尽量避免定义不必要的子类"><a href="#尽量避免定义不必要的子类" class="headerlink" title="尽量避免定义不必要的子类"></a>尽量避免定义不必要的子类</h4></li></ol><p>多一个类就需要多一份类加载，所以尽量避免定义不必要的子类。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP = Collections.unmodifiableMap(<span class="keyword">new</span> HashMap&lt;String, Class&gt;(<span class="number">16</span>) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        put(<span class="string">"VARCHAR"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    classMap.put(<span class="string">"VARCHAR"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ...</span><br><span class="line">    CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li><h4 id="尽量指定类的final修饰符"><a href="#尽量指定类的final修饰符" class="headerlink" title="尽量指定类的final修饰符"></a>尽量指定类的final修饰符</h4></li></ol><p>为类指定final修饰符，可以让该类不可以被继承。如果指定了一个类为final，则该类所有的方法都是final的，Java编译器会寻找机会内联所有的final方法。内联对于提升Java运行效率作用重大，具体可参见Java运行期优化，能够使性能平均提高50%。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用Spring的AOP特性时，需要对Bean进行动态代理，如果Bean类添加了final修饰，会导致异常。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol start="14"><li><h4 id="把跟类成员变量无关的方法声明成静态方法"><a href="#把跟类成员变量无关的方法声明成静态方法" class="headerlink" title="把跟类成员变量无关的方法声明成静态方法"></a>把跟类成员变量无关的方法声明成静态方法</h4></li></ol><p>静态方法的好处就是不用生成类的实例就可以直接调用。静态方法不再属于某个对象，而是属于它所在的类。只需要通过其类名就可以访问，不需要再消耗资源去反复创建对象。即便在类内部的私有方法，如果没有使用到类成员变量，也应该声明为静态方法。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">  Calendar calendar = Calendar.getInstance();</span><br><span class="line">  calendar.setTime(date);</span><br><span class="line">  <span class="keyword">return</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">  Calendar calendar = Calendar.getInstance();</span><br><span class="line">  calendar.setTime(date);</span><br><span class="line">  <span class="keyword">return</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="15"><li><h4 id="尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断"><a href="#尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断" class="headerlink" title="尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断"></a>尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断</h4></li></ol><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(Double value1, Double value2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> double1 = Objects.isNull(value1) ? <span class="number">0.0</span>D : value1;</span><br><span class="line">    <span class="keyword">double</span> double2 = Objects.isNull(value2) ? <span class="number">0.0</span>D : value2;</span><br><span class="line">    <span class="keyword">return</span> double1 + double2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> result = sum(<span class="number">1.0</span>D, <span class="number">2.0</span>D);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> result = sum(<span class="number">1.0</span>D, <span class="number">2.0</span>D);</span><br></pre></td></tr></table></figure><ol start="16"><li><h4 id="尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断"><a href="#尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断" class="headerlink" title="尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断"></a>尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断</h4></li></ol><p>在JDK类库的方法中，很多方法返回值都采用了基本数据类型，首先是为了避免不必要的装箱和拆箱，其次是为了避免返回值的空指针判断。比如：Collection.isEmpty()和Map.size()。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line">Boolean isValid = isValid(user);</span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(isValid) &amp;&amp; isValid.booleanValue()) &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line"><span class="keyword">if</span> (isValid(user)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="17"><li><h4 id="协议方法参数值非空，避免不必要的空指针判断"><a href="#协议方法参数值非空，避免不必要的空指针判断" class="headerlink" title="协议方法参数值非空，避免不必要的空指针判断"></a>协议方法参数值非空，避免不必要的空指针判断</h4></li></ol><p>协议编程，可以@NonNull和@Nullable标注参数，是否遵循全凭调用者自觉。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(@NonNull UserDO user)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="18"><li><h4 id="协议方法返回值非空，避免不必要的空指针判断"><a href="#协议方法返回值非空，避免不必要的空指针判断" class="headerlink" title="协议方法返回值非空，避免不必要的空指针判断"></a>协议方法返回值非空，避免不必要的空指针判断</h4></li></ol><p>协议编程，可以@NonNull和@Nullable标注参数，是否遵循全凭实现者自觉。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">queryUserOrder</span><span class="params">(Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">List&lt;OrderVO&gt; orderList = orderService.queryUserOrder(userId);</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(orderList)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (OrderVO order : orderList) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">queryUserOrder</span><span class="params">(Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">List&lt;OrderVO&gt; orderList = orderService.queryUserOrder(userId);</span><br><span class="line"><span class="keyword">for</span> (OrderVO order : orderList) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="19"><li><h4 id="被调用方法已支持判空处理，调用方法无需再进行判空处理"><a href="#被调用方法已支持判空处理，调用方法无需再进行判空处理" class="headerlink" title="被调用方法已支持判空处理，调用方法无需再进行判空处理"></a>被调用方法已支持判空处理，调用方法无需再进行判空处理</h4></li></ol><p>协议编程，可以@NonNull和@Nullable标注参数，是否遵循全凭实现者自觉。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDO user = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">    user = JSON.parseObject(value, UserDO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDO user = JSON.parseObject(value, UserDO<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><ol start="20"><li><h4 id="尽量避免不必要的函数封装"><a href="#尽量避免不必要的函数封装" class="headerlink" title="尽量避免不必要的函数封装"></a>尽量避免不必要的函数封装</h4></li></ol><p>方法调用会引起入栈和出栈，导致消耗更多的CPU和内存，应当尽量避免不必要的函数封装。当然，为了使代码更简洁、更清晰、更易维护，增加一定的方法调用所带来的性能损耗是值得的。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数封装</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVip</span><span class="params">(Boolean isVip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(isVip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line"><span class="keyword">boolean</span> isVip = isVip(user.getVip());</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isVip = Boolean.TRUE.equals(user.getVip());</span><br></pre></td></tr></table></figure><ol start="21"><li><h4 id="尽量指定方法的final修饰符"><a href="#尽量指定方法的final修饰符" class="headerlink" title="尽量指定方法的final修饰符"></a>尽量指定方法的final修饰符</h4></li></ol><p>方法指定final修饰符，可以让方法不可以被重写，Java编译器会寻找机会内联所有的final方法。内联对于提升Java运行效率作用重大，具体可参见Java运行期优化，能够使性能平均提高50%。</p><p><strong>注意：</strong>所有的private方法会隐式地被指定final修饰符，所以无须再为其指定final修饰符。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用Spring的AOP特性时，需要对Bean进行动态代理，如果Bean类添加了final修饰，会导致异常。</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ol start="22"><li><h4 id="尽量减少方法的重复调用"><a href="#尽量减少方法的重复调用" class="headerlink" title="尽量减少方法的重复调用"></a>尽量减少方法的重复调用</h4></li></ol><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">int</span> userLength = userList.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userLength; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="23"><li><h4 id="尽量避免不必要的方法调用"><a href="#尽量避免不必要的方法调用" class="headerlink" title="尽量避免不必要的方法调用"></a>尽量避免不必要的方法调用</h4></li></ol><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = userDAO.queryActive();</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="24"><li><h4 id="尽量使用移位来代替正整数乘除"><a href="#尽量使用移位来代替正整数乘除" class="headerlink" title="尽量使用移位来代替正整数乘除"></a>尽量使用移位来代替正整数乘除</h4></li></ol><p>用移位操作可以极大地提高性能。对于乘除2^n(n为正整数)的正整数计算，可以用移位操作来代替。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = a * <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = a / <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = a &gt;&gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol start="25"><li><h4 id="提取公共表达式，避免重复计算"><a href="#提取公共表达式，避免重复计算" class="headerlink" title="提取公共表达式，避免重复计算"></a>提取公共表达式，避免重复计算</h4></li></ol><p>提取公共表达式，只计算一次值，然后重复利用值。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> dx = x2 - x1;</span><br><span class="line"><span class="keyword">double</span> dy = y2 - y1;</span><br><span class="line"><span class="keyword">double</span> distance = Math.sqrt(dx * dx + dy * dy);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">double</span> distance = Math.sqrt(Math.pow(x2 - x1, <span class="number">2</span>) + Math.pow(y2 - y1, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><ol start="26"><li><h4 id="尽量不在条件表达式中用-取反"><a href="#尽量不在条件表达式中用-取反" class="headerlink" title="尽量不在条件表达式中用!取反"></a>尽量不在条件表达式中用!取反</h4></li></ol><p>使用!取反会多一次计算，如果没有必要则优化掉。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(a &gt;= <span class="number">10</span>)) &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="27"><li><h4 id="对于多常量选择分支，尽量使用switch语句而不是if-else语句"><a href="#对于多常量选择分支，尽量使用switch语句而不是if-else语句" class="headerlink" title="对于多常量选择分支，尽量使用switch语句而不是if-else语句"></a>对于多常量选择分支，尽量使用switch语句而不是if-else语句</h4></li></ol><p>if-else语句，每个if条件语句都要加装计算，直到if条件语句为true为止。switch语句进行了跳转优化，Java中采用tableswitch或lookupswitch指令实现，对于多常量选择分支处理效率更高。经过试验证明：在每个分支出现概率相同的情况下，低于5个分支时if-else语句效率更高，高于5个分支时switch语句效率更高。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    ...; <span class="comment">// 分支1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">    ...; <span class="comment">// 分支2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == ...) &#123;</span><br><span class="line">    ...; <span class="comment">// 分支n</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...; <span class="comment">// 分支n+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">        ... <span class="comment">// 分支1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">        ... <span class="comment">// 分支2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ... :</span><br><span class="line">        ... <span class="comment">// 分支n</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        ... <span class="comment">// 分支n+1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备注：</strong>如果业务复杂，可以采用Map实现策略模式。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol start="28"><li><h4 id="尽量不要使用正则表达式匹配"><a href="#尽量不要使用正则表达式匹配" class="headerlink" title="尽量不要使用正则表达式匹配"></a>尽量不要使用正则表达式匹配</h4></li></ol><p>正则表达式匹配效率较低，尽量使用字符串匹配操作。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a::1,b::2,c::3,d::4"</span>;</span><br><span class="line">String target = source.replaceAll(<span class="string">"::"</span>, <span class="string">"="</span>);</span><br><span class="line">String[] targets = source.split(<span class="string">"::"</span>);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a::1,b::2,c::3,d::4"</span>;</span><br><span class="line">String target = source.replace(<span class="string">"::"</span>, <span class="string">"="</span>);</span><br><span class="line">String[] targets = StringUtils.split(source, <span class="string">"::"</span>);</span><br></pre></td></tr></table></figure><ol start="29"><li><h4 id="尽量使用字符替换字符串"><a href="#尽量使用字符替换字符串" class="headerlink" title="尽量使用字符替换字符串"></a>尽量使用字符替换字符串</h4></li></ol><p>字符串的长度不确定，而字符的长度固定为1，查找和匹配的效率自然提高了。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a:1,b:2,c:3,d:4"</span>;</span><br><span class="line"><span class="keyword">int</span> index = source.indexOf(<span class="string">":"</span>);</span><br><span class="line">String target = source.replace(<span class="string">":"</span>, <span class="string">"="</span>);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a:1,b:2,c:3,d:4"</span>;</span><br><span class="line"><span class="keyword">int</span> index = source.indexOf(<span class="string">':'</span>);</span><br><span class="line">String target = source.replace(<span class="string">':'</span>, <span class="string">'='</span>);</span><br></pre></td></tr></table></figure><ol start="30"><li><h4 id="尽量使用StringBuilder进行字符串拼接"><a href="#尽量使用StringBuilder进行字符串拼接" class="headerlink" title="尽量使用StringBuilder进行字符串拼接"></a>尽量使用StringBuilder进行字符串拼接</h4></li></ol><p>String是final类，内容不可修改，所以每次字符串拼接都会生成一个新对象。StringBuilder在初始化时申请了一块内存，以后的字符串拼接都在这块内存中执行，不会申请新内存和生成新对象。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        s += <span class="string">','</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        sb.append(<span class="string">','</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="31"><li><h4 id="不要使用””-转化字符串"><a href="#不要使用””-转化字符串" class="headerlink" title="不要使用””+转化字符串"></a>不要使用””+转化字符串</h4></li></ol><p>使用””+进行字符串转化，使用方便但是效率低，建议使用String.valueOf.</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line">String s = <span class="string">""</span> + i;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line">String s = String.valueOf(i);</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol start="32"><li><h4 id="不要使用循环拷贝数组，尽量使用System-arraycopy拷贝数组"><a href="#不要使用循环拷贝数组，尽量使用System-arraycopy拷贝数组" class="headerlink" title="不要使用循环拷贝数组，尽量使用System.arraycopy拷贝数组"></a>不要使用循环拷贝数组，尽量使用System.arraycopy拷贝数组</h4></li></ol><p>推荐使用System.arraycopy拷贝数组，也可以使用Arrays.copyOf拷贝数组。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sources = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] targets = <span class="keyword">new</span> <span class="keyword">int</span>[sources.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; targets.length; i++) &#123;</span><br><span class="line">    targets[i] = sources[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sources = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] targets = <span class="keyword">new</span> <span class="keyword">int</span>[sources.length];</span><br><span class="line">System.arraycopy(sources, <span class="number">0</span>, targets, <span class="number">0</span>, targets.length);</span><br></pre></td></tr></table></figure><ol start="33"><li><h4 id="集合转化为类型T数组时，尽量传入空数组T-0"><a href="#集合转化为类型T数组时，尽量传入空数组T-0" class="headerlink" title="集合转化为类型T数组时，尽量传入空数组T[0]"></a>集合转化为类型T数组时，尽量传入空数组T[0]</h4></li></ol><p>将集合转换为数组有2种形式：toArray(new T[n])和toArray(new T[0])。在旧的Java版本中，建议使用toArray(new T[n])，因为创建数组时所需的反射调用非常慢。在OpenJDK6后，反射调用是内在的，使得性能得以提高，toArray(new T[0])比toArray(new T[n])效率更高。此外，toArray(new T[n])比toArray(new T[0])多获取一次列表大小，如果计算列表大小耗时过长，也会导致toArray(new T[n])效率降低。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ...);</span><br><span class="line">Integer[] integers = integerList.toArray(<span class="keyword">new</span> Integer[integerList.size()]);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ...);</span><br><span class="line">Integer[] integers = integerList.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]); <span class="comment">// 勿用new Integer[]&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>建议：</strong>集合应该提供一个toArray(Class<t> clazz)方法，避免无用的空数组初始化（new T[0]）。</t></p><ol start="34"><li><h4 id="集合转化为Object数组时，尽量使用toArray-方法"><a href="#集合转化为Object数组时，尽量使用toArray-方法" class="headerlink" title="集合转化为Object数组时，尽量使用toArray()方法"></a>集合转化为Object数组时，尽量使用toArray()方法</h4></li></ol><p>转化Object数组时，没有必要使用toArray[new Object[0]]，可以直接使用toArray()。避免了类型的判断，也避免了空数组的申请，所以效率会更高。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = Arrays.asList(<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="string">"4"</span>, <span class="number">5</span>, ...);</span><br><span class="line">Object[] objects = objectList.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = Arrays.asList(<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="string">"4"</span>, <span class="number">5</span>, ...);</span><br><span class="line">Object[] objects = objectList.toArray();</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ol start="35"><li><h4 id="初始化集合时，尽量指定集合大小"><a href="#初始化集合时，尽量指定集合大小" class="headerlink" title="初始化集合时，尽量指定集合大小"></a>初始化集合时，尽量指定集合大小</h4></li></ol><p>Java集合初始化时都会指定一个默认大小，当默认大小不再满足数据需求时就会扩容，每次扩容的时间复杂度有可能是O(n)。所以，尽量指定预知的集合大小，就能避免或减少集合的扩容次数。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">Set&lt;Long&gt; userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;UserVO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userSet.add(userDO.getId());</span><br><span class="line">    userMap.put(userDO.getId(), userDO);</span><br><span class="line">    userList.add(transUser(userDO));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"><span class="keyword">int</span> userSize = userDOList.size();</span><br><span class="line">Set&lt;Long&gt; userSet = <span class="keyword">new</span> HashSet&lt;&gt;(userSize);</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;((<span class="keyword">int</span>) Math.ceil(userSize * <span class="number">4.0</span> / <span class="number">3</span>));</span><br><span class="line">List&lt;UserVO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(userSize);</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userSet.add(userDO.getId());</span><br><span class="line">    userMap.put(userDO.getId(), userDO);</span><br><span class="line">    userList.add(transUser(userDO));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="36"><li><h4 id="不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合"><a href="#不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合" class="headerlink" title="不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合"></a>不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合</h4></li></ol><p>JDK提供的方法可以一步指定集合的容量，避免多次扩容浪费时间和空间。同时，这些方法的底层也是调用System.arraycopy方法实现，进行数据的批量拷贝效率更高。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; user1List = ...;</span><br><span class="line">List&lt;UserDO&gt; user2List = ...;</span><br><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(user1List.size() + user2List.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO user1 : user1List) &#123;</span><br><span class="line">    userList.add(user1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (UserDO user2 : user2List) &#123;</span><br><span class="line">    userList.add(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; user1List = ...;</span><br><span class="line">List&lt;UserDO&gt; user2List = ...;</span><br><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(user1List.size() + user2List.size());</span><br><span class="line">userList.addAll(user1List);</span><br><span class="line">userList.addAll(user2List);</span><br></pre></td></tr></table></figure><ol start="37"><li><h4 id="尽量使用Arrays-asList转化数组为列表"><a href="#尽量使用Arrays-asList转化数组为列表" class="headerlink" title="尽量使用Arrays.asList转化数组为列表"></a>尽量使用Arrays.asList转化数组为列表</h4></li></ol><p>原理与”不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合”类似。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; typeList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">typeList.add(<span class="string">"Short"</span>);</span><br><span class="line">typeList.add(<span class="string">"Integer"</span>);</span><br><span class="line">typeList.add(<span class="string">"Long"</span>);</span><br><span class="line"></span><br><span class="line">String[] names = ...;</span><br><span class="line">List&lt;String&gt; nameList = ...;</span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">    nameList.add(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; typeList = Arrays.asList(<span class="string">"Short"</span>, <span class="string">"Integer"</span>, <span class="string">"Long"</span>);</span><br><span class="line"></span><br><span class="line">String[] names = ...;</span><br><span class="line">List&lt;String&gt; nameList = ...;</span><br><span class="line">nameList.addAll(Arrays.asList(names));</span><br></pre></td></tr></table></figure><ol start="38"><li><h4 id="直接迭代需要使用的集合"><a href="#直接迭代需要使用的集合" class="headerlink" title="直接迭代需要使用的集合"></a>直接迭代需要使用的集合</h4></li></ol><p>直接迭代需要使用的集合，无需通过其它操作获取数据。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">for</span> (Long userId : userMap.keySet()) &#123;</span><br><span class="line">    UserDO user = userMap.get(userId);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Long, UserDO&gt; userEntry : userMap.entrySet()) &#123;</span><br><span class="line">    Long userId = userEntry.getKey();</span><br><span class="line">    UserDO user = userEntry.getValue();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="39"><li><h4 id="不要使用size方法检测空，必须使用isEmpty方法检测空"><a href="#不要使用size方法检测空，必须使用isEmpty方法检测空" class="headerlink" title="不要使用size方法检测空，必须使用isEmpty方法检测空"></a>不要使用size方法检测空，必须使用isEmpty方法检测空</h4></li></ol><p>使用size方法来检测空逻辑上没有问题，但使用isEmpty方法使得代码更易读，并且可以获得更好的性能。任何isEmpty方法实现的时间复杂度都是O(1)，但是某些size方法实现的时间复杂度有可能是O(n)。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">if</span> (userList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">if</span> (userMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">if</span> (userList.isEmpty()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="40"><li><h4 id="非随机访问的List，尽量使用迭代代替随机访问"><a href="#非随机访问的List，尽量使用迭代代替随机访问" class="headerlink" title="非随机访问的List，尽量使用迭代代替随机访问"></a>非随机访问的List，尽量使用迭代代替随机访问</h4></li></ol><p>对于列表，可分为随机访问和非随机访问两类，可以用是否实现RandomAccess接口判断。随机访问列表，直接通过get获取数据不影响效率。而非随机访问列表，通过get获取数据效率极低。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"><span class="keyword">int</span> size = userDOList.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    UserDO userDO = userDOList.get(i);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议：</strong>其实，不管列表支不支持随机访问，都应该使用迭代进行遍历。</p><ol start="41"><li><h4 id="尽量使用HashSet判断值存在"><a href="#尽量使用HashSet判断值存在" class="headerlink" title="尽量使用HashSet判断值存在"></a>尽量使用HashSet判断值存在</h4></li></ol><p>在Java集合类库中，List的contains方法普遍时间复杂度是O(n)，而HashSet的时间复杂度为O(1)。如果需要频繁调用contains方法查找数据，可以先将List转换成HashSet。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; adminIdList = ...;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (adminIdList.contains(userDO.getId())) &#123;</span><br><span class="line">        userVOList.add(transUser(userDO));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Long&gt; adminIdSet = ...;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (adminIdSet.contains(userDO.getId())) &#123;</span><br><span class="line">        userVOList.add(transUser(userDO));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="42"><li><h4 id="避免先判断存在再进行获取"><a href="#避免先判断存在再进行获取" class="headerlink" title="避免先判断存在再进行获取"></a>避免先判断存在再进行获取</h4></li></ol><p>如果需要先判断存在再进行获取，可以直接获取并判断空，从而避免了二次查找操作。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserVO <span class="title">transUser</span><span class="params">(UserDO user, Map&lt;Long, RoleDO&gt; roleMap)</span> </span>&#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(user.getId());</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (roleMap.contains(user.getRoleId())) &#123;</span><br><span class="line">        RoleDO role = roleMap.get(user.getRoleId());</span><br><span class="line">        userVO.setRole(transRole(role));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserVO <span class="title">transUser</span><span class="params">(UserDO user, Map&lt;Long, RoleDO&gt; roleMap)</span> </span>&#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(user.getId());</span><br><span class="line">    ...</span><br><span class="line">    RoleDO role = roleMap.get(user.getRoleId());</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(role)) &#123;</span><br><span class="line">        userVO.setRole(transRole(role));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol start="43"><li><h4 id="直接捕获对应的异常"><a href="#直接捕获对应的异常" class="headerlink" title="直接捕获对应的异常"></a>直接捕获对应的异常</h4></li></ol><p>直接捕获对应的异常，避免用instanceof判断，效率更高代码更简洁。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    saveData();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">        log.error(<span class="string">"保存数据IO异常"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.error(<span class="string">"保存数据其它异常"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    saveData();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">"保存数据IO异常"</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">"保存数据其它异常"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="44"><li><h4 id="尽量避免在循环中捕获异常"><a href="#尽量避免在循环中捕获异常" class="headerlink" title="尽量避免在循环中捕获异常"></a>尽量避免在循环中捕获异常</h4></li></ol><p>当循环体抛出异常后，无需循环继续执行时，没有必要在循环体中捕获异常。因为，过多的捕获异常会降低程序执行效率。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">sum</span><span class="params">(List&lt;String&gt; valueList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="keyword">for</span> (String value : valueList) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sum += Double.parseDouble(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">sum</span><span class="params">(List&lt;String&gt; valueList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String value : valueList) &#123;</span><br><span class="line">            sum += Double.parseDouble(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="45"><li><h4 id="禁止使用异常控制业务流程"><a href="#禁止使用异常控制业务流程" class="headerlink" title="禁止使用异常控制业务流程"></a>禁止使用异常控制业务流程</h4></li></ol><p>相对于条件表达式，异常的处理效率更低。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">    &#125; <span class="keyword">catch</span>(NullPointerException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><ol start="46"><li><h4 id="初始化时尽量指定缓冲区大小"><a href="#初始化时尽量指定缓冲区大小" class="headerlink" title="初始化时尽量指定缓冲区大小"></a>初始化时尽量指定缓冲区大小</h4></li></ol><p>初始化时，指定缓冲区的预期容量大小，避免多次扩容浪费时间和空间。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="number">1024</span>);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><ol start="47"><li><h4 id="尽量重复使用同一缓冲区"><a href="#尽量重复使用同一缓冲区" class="headerlink" title="尽量重复使用同一缓冲区"></a>尽量重复使用同一缓冲区</h4></li></ol><p>针对缓冲区，Java虚拟机需要花时间生成对象，还要花时间进行垃圾回收处理。所以，尽量重复利用缓冲区。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder1 = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder1.append(<span class="string">"update t_user set name = '"</span>).append(userName).append(<span class="string">"' where id = "</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder1.toString());</span><br><span class="line">StringBuilder builder2 = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder2.append(<span class="string">"select id, name from t_user where id = "</span>).append(userId);</span><br><span class="line">ResultSet resultSet = statement.executeQuery(builder2.toString());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder.append(<span class="string">"update t_user set name = '"</span>).append(userName).append(<span class="string">"' where id = "</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder.toString());</span><br><span class="line">builder.setLength(<span class="number">0</span>);</span><br><span class="line">builder.append(<span class="string">"select id, name from t_user where id = "</span>).append(userId);</span><br><span class="line">ResultSet resultSet = statement.executeQuery(builder.toString());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>其中，使用setLength方法让缓冲区重新从0开始。</p><ol start="48"><li><h4 id="尽量设计使用同一缓冲区"><a href="#尽量设计使用同一缓冲区" class="headerlink" title="尽量设计使用同一缓冲区"></a>尽量设计使用同一缓冲区</h4></li></ol><p>为了提高程序运行效率，在设计上尽量使用同一缓冲区。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转化XML(UserDO)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toXml</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">    builder.append(<span class="string">"&lt;UserDO&gt;"</span>);</span><br><span class="line">    builder.append(toXml(user.getId()));</span><br><span class="line">    builder.append(toXml(user.getName()));</span><br><span class="line">    builder.append(toXml(user.getRole()));</span><br><span class="line">    builder.append(<span class="string">"&lt;/UserDO&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转化XML(Long)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toXml</span><span class="params">(Long value)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">    builder.append(<span class="string">"&lt;Long&gt;"</span>);</span><br><span class="line">    builder.append(value);</span><br><span class="line">    builder.append(<span class="string">"&lt;/Long&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line">String xml = toXml(user);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转化XML(UserDO)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toXml</span><span class="params">(StringBuilder builder, UserDO user)</span> </span>&#123;</span><br><span class="line">    builder.append(<span class="string">"&lt;UserDO&gt;"</span>);</span><br><span class="line">    toXml(builder, user.getId());</span><br><span class="line">    toXml(builder, user.getName());</span><br><span class="line">    toXml(builder, user.getRole());</span><br><span class="line">    builder.append(<span class="string">"&lt;/UserDO&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转化XML(Long)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toXml</span><span class="params">(StringBuilder builder, Long value)</span> </span>&#123;</span><br><span class="line">    builder.append(<span class="string">"&lt;Long&gt;"</span>);</span><br><span class="line">    builder.append(value);</span><br><span class="line">    builder.append(<span class="string">"&lt;/Long&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line">toXml(builder, user);</span><br><span class="line">String xml = builder.toString();</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>去掉每个转化方法中的缓冲区申请，申请一个缓冲区给每个转化方法使用。从时间上来说，节约了大量缓冲区的申请释放时间；从空间上来说，节约了大量缓冲区的临时存储空间。</p><ol start="49"><li><h4 id="尽量使用缓冲流减少IO操作"><a href="#尽量使用缓冲流减少IO操作" class="headerlink" title="尽量使用缓冲流减少IO操作"></a>尽量使用缓冲流减少IO操作</h4></li></ol><p>使用缓冲流BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream等，可以大幅较少IO次数并提升IO速度。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"a"</span>);</span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">"b"</span>)) &#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((size = input.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        output.write(temp, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">"复制文件异常"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedInputStream input = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"a"</span>));</span><br><span class="line">    BufferedOutputStream output = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"b"</span>))) &#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((size = input.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        output.write(temp, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">"复制文件异常"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>其中，可以根据实际情况手动指定缓冲流的大小，把缓冲流的缓冲作用发挥到最大。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ol start="50"><li><h4 id="在单线程中，尽量使用非线程安全类"><a href="#在单线程中，尽量使用非线程安全类" class="headerlink" title="在单线程中，尽量使用非线程安全类"></a>在单线程中，尽量使用非线程安全类</h4></li></ol><p>使用非线程安全类，避免了不必要的同步开销。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="number">128</span>);</span><br><span class="line">buffer.append(<span class="string">"select * from "</span>).append(T_USER).append(<span class="string">" where id = ?"</span>);</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder.append(<span class="string">"select * from "</span>).append(T_USER).append(<span class="string">" where id = ?"</span>);</span><br></pre></td></tr></table></figure><ol start="51"><li><h4 id="在多线程中，尽量使用线程安全类"><a href="#在多线程中，尽量使用线程安全类" class="headerlink" title="在多线程中，尽量使用线程安全类"></a>在多线程中，尽量使用线程安全类</h4></li></ol><p>使用线程安全类，比自己实现的同步代码更简洁更高效。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    counter.incrementAndGet();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="52"><li><h4 id="尽量减少同步代码块范围"><a href="#尽量减少同步代码块范围" class="headerlink" title="尽量减少同步代码块范围"></a>尽量减少同步代码块范围</h4></li></ol><p>在一个方法中，可能只有一小部分的逻辑是需要同步控制的，如果同步控制了整个方法会影响执行效率。所以，尽量减少同步代码块的范围，只对需要进行同步的代码进行同步。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">    ... <span class="comment">// 非同步操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    ... <span class="comment">// 非同步操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="53"><li><h4 id="尽量合并为同一同步代码块"><a href="#尽量合并为同一同步代码块" class="headerlink" title="尽量合并为同一同步代码块"></a>尽量合并为同一同步代码块</h4></li></ol><p>同步代码块是有性能开销的，如果确定可以合并为同一同步代码块，就应该尽量合并为同一同步代码块。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理单一订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title">handleOrder</span><span class="params">(OrderDO order)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOrder</span><span class="params">(List&lt;OrderDO&gt; orderList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (OrderDO order : orderList) &#123;</span><br><span class="line">        handleOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理单一订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">handleOrder</span><span class="params">(OrderDO order)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleOrder</span><span class="params">(List&lt;OrderDO&gt; orderList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (OrderDO order : orderList) &#123;</span><br><span class="line">        handleOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="54"><li><h4 id="尽量使用线程池减少线程开销"><a href="#尽量使用线程池减少线程开销" class="headerlink" title="尽量使用线程池减少线程开销"></a>尽量使用线程池减少线程开销</h4></li></ol><p>多线程中两个必要的开销：线程的创建和上下文切换。采用线程池，可以尽量地避免这些开销。</p><p><strong>反例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService EXECUTOR_SERVICE = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    executorService.execute(runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中属性百分比计算依据</title>
      <link href="/2019/08/23/CSS%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97%E4%BE%9D%E6%8D%AE/"/>
      <url>/2019/08/23/CSS%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97%E4%BE%9D%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>在CSS属性中，很多属性的取值可以采用百分比制，比如：width、height、padding、margin、font-size、line-height、background-position等，那么他们的计算依据是什么呢？</p><a id="more"></a><p>根据相关实例测试，现得出以下结论：</p><ul><li><p>font-size</p><p>当前的字体大小等于100%</p></li><li><p>line-height</p><p>line-height的计算值就是当前字体的值乘以该百分比。</p></li><li><p>width</p><p>正常文档流中和设置浮动的情况下，相对于父元素content-box的宽度；绝对定位时，相对于包含块padding-box的宽度。</p></li><li><p>height</p><p>height对百分比也是支持的，但是其和width还是有一个明显的区别：当父元素width属性为auto时，子元素宽度仍然可以使用百分比设置。但是对于height，只要子元素还是在正常文档流当中的，如果父元素的height属性为auto，则子元素height设置为百分比会被忽略。规范中指出：如果包含块的高度没有显式指出（即高度由内容决定），并且该元素不是绝对定位，则计算值为auto。而auto*100/100=NaN。经常我们希望body的高度为100%，那么我们需要做如下设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>margin、padding</p><p>无论是垂直或水平方向，均是相对于父元素的宽度，正常文档流中和设置浮动的情况下，相对于父元素content-box的宽度；绝对定位时，相对于包含块padding-box的宽度。</p></li><li><p>定位元素的left/right/bottom/top百分比值</p><p>top,bottom设置百分比定位是按包含块padding-box的高度来计算的，同样left,right,设置百分比定位是按包含块padding-box的宽度来计算的。</p></li><li><p>background-position</p><p>使用关键字和百分比的情况下，设定的值同时应用于元素和图片，换句话说，如果设定了20% 20% ,则外部元素水平20%的位置和图片水平20%的位置对齐、外部元素垂直20%的位置和图片垂直20%的位置对齐。设背景的区域高度为containerY、宽度为containerX，背景图片的宽度为imgX、高度为imgY，针对对齐点，计算出图片相对于左上角：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">top: containerY * <span class="number">20</span>% - imgY * <span class="number">20</span>% = (containerY - imgY) * <span class="number">20</span>%;</span><br><span class="line">left: containerX * <span class="number">20</span>% - imgX * <span class="number">20</span>% = (containerX - imgX) * <span class="number">20</span>%;</span><br><span class="line"></span><br><span class="line">换算过程为：</span><br><span class="line">(设置背景的区域高度 - 背景图的高度) * 百分比（正或负值），如：</span><br><span class="line">(<span class="number">100</span> - <span class="number">200</span>) * (<span class="number">-50</span>%) = <span class="number">50</span>px。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于前端的一些坑</title>
      <link href="/2019/08/23/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2019/08/23/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>我们在学习前端的知识过程中，难免会因为没有深入其真正的原理、或错误的理解，而把自己带入坑中。</p><a id="more"></a><ul><li>时间加一个月的坑</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 假设当前日期为1月31号</span><br><span class="line"><span class="keyword">var</span> date= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">0</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line"># 我们给当前日期的月份加上1</span><br><span class="line">date.setMonth(date.getMonth() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"># 输出date</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// Sun Mar 03 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"># 此时结果出现了与我们预期不符,我们本希望的是2月的最后一天。</span><br></pre></td></tr></table></figure><blockquote><p>此时我们可以认定，在 JS 中（当前日期月份加1）将理解成: <code>当前日期 + 当月的天数(即 1月31号+31天)</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper单机版安装</title>
      <link href="/2019/08/07/zookeeper%E5%8D%95%E6%9C%BA%E7%89%88%E5%AE%89%E8%A3%85/"/>
      <url>/2019/08/07/zookeeper%E5%8D%95%E6%9C%BA%E7%89%88%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><a id="more"></a><ul><li><p>官方下载地址：<a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">http://zookeeper.apache.org/releases.html#download</a></p></li><li><p>上传压缩包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压至指定目录</span></span><br><span class="line">tar -zxvf zookeeper-x.x.x.tar.gz  -C /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment"># 进入配置目录</span></span><br><span class="line"><span class="built_in">cd</span> zookeeper-3.4.8/conf</span><br><span class="line"><span class="comment"># 根据示例配置文件，配置自己的配置</span></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><ul><li>示例配置内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br></pre></td></tr></table></figure><ul><li>配置说明</li></ul><p>tickTime: Zookeeper服务器与客服端服务器的心跳检测间隔时间，单位（毫秒）<br>initLimit: 集群中follower服务与leader服务器，初始转接最多心跳数。<br>syncLimit: 集群中follower服务与leader服务器，请求与应答最多心跳数<br>dataDir: Zookeeper数据文件存储目录。无默认配置，必须配置，用于配置存储快照文件的目录。如果没有配置dataLogDir，那么事务日志也会存储在此目录。<br>clientPort: Zookeeper服务器监听端口，</p><ul><li>相关命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动ZK服务</span></span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="comment"># 停止ZK服务</span></span><br><span class="line">./zkServer.sh stop</span><br><span class="line"><span class="comment"># 重启ZK服务</span></span><br><span class="line">./zkServer.sh restart</span><br><span class="line"><span class="comment"># 查看ZK服务状态</span></span><br><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><ul><li>客户端进行连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./zkCli.sh -server 主机:端口</span></span><br><span class="line">./zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装iptables</title>
      <link href="/2019/08/05/Centos7-%E5%AE%89%E8%A3%85iptables/"/>
      <url>/2019/08/05/Centos7-%E5%AE%89%E8%A3%85iptables/</url>
      
        <content type="html"><![CDATA[<p>Centos7 配置iptables防火墙的步骤：</p><ul><li>检测并关闭firewall</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测是否开启了firewall</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止firewall开机自启</span></span><br><span class="line">sytsemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><ul><li>安装iptables-services</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用yum安装iptables-services</span></span><br><span class="line">yum install -y iptables-services</span><br></pre></td></tr></table></figure><ul><li>将规则写入iptables配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置，添加自己的规则</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample configuration for iptables service</span></span><br><span class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></span><br><span class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><ul><li>相关命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start iptables.service</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop iptables.service</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart iptables.service</span><br><span class="line"><span class="comment"># 设置防火墙开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service</span><br></pre></td></tr></table></figure><ul><li>关闭 SELINUX</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=enforcing</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><p>需作如下操作，实现关闭 SELINUX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释</span></span><br><span class="line">SELINUX=enforcing</span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment">#保存退出</span></span><br><span class="line">:wq!</span><br><span class="line"><span class="comment">#使配置立即生效</span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 实现一行文字居中对齐，多行文字左对齐</title>
      <link href="/2019/08/04/CSS-%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%EF%BC%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B7%A6%E5%AF%B9%E9%BD%90/"/>
      <url>/2019/08/04/CSS-%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%EF%BC%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B7%A6%E5%AF%B9%E9%BD%90/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>主要用于产品列表页面，用于产品图片下面，显示产品的名称,当产品名称字数较少时，文字将居中对齐，但字数较多时则希望采用左对齐。另一个应用场景，则是消息弹出框的提示信息，当提示内容比较少时，内容居中显示在弹出框，提示内容比较多时，内容居左对齐。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>当文字长度小于盒子宽度，也就是一行时，文字居中。当文字长度大于盒子的宽度，会自动换行，成为多行文字，此时文字左对齐。</p><h4 id="方法：利用行内元素-双层盒子"><a href="#方法：利用行内元素-双层盒子" class="headerlink" title="方法：利用行内元素(双层盒子)"></a>方法：利用行内元素(双层盒子)</h4><p>原理：设定内层盒子为行内元素，当内层盒子内容宽度小于外层盒子的宽度时，其对齐方式为外层盒子对齐方式，当内层盒子内容宽度达到与外层重叠时，内容为内层盒子的对齐方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>一行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>这里是比较长的两行文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">text-align</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 开启远程访问权限</title>
      <link href="/2019/08/03/Mysql-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"/>
      <url>/2019/08/03/Mysql-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>由于默认mysql的用户是没有开启远程访问的权限的，因此当客户端跟mysql数据库不在同一台服务器上时，客户端将无法正常访问mysql服务器，需要开启mysql的远程访问权限才能正常访问mysql服务器。</p><p>主要有两种方法，改表法和授权法。</p><a id="more"></a><ul><li><p>改表法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE MYSQL;   </span><br><span class="line">mysql&gt; UPDATE USER SET host = <span class="string">'%'</span> WHERE user = <span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li><li><p>授权法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE MYSQL;  </span><br><span class="line"><span class="comment"># 赋予任何主机访问以及修改所有数据的权限</span></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> WITH GRANT OPTION    </span><br><span class="line"><span class="comment"># 例如，你想root用户使用root从任何主机连接到mysql服务器的话。  </span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'root'</span> WITH GRANT OPTION;   </span><br><span class="line"><span class="comment"># 如果你想允许用户root从ip为192.168.1.123的主机连接到mysql服务器，并使用root作为密码   </span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'192.168.1.123'</span>IDENTIFIED BY <span class="string">'root'</span> WITH GRANT OPTION;   </span><br><span class="line"><span class="comment"># 修改生效</span></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure></li></ul><p>本人建议采用授权法。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
